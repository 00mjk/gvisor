// Copyright 2021 The gVisor Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Binary flatten converts a nested container image archive generated by
// `docker save` into a single, flat archive.
package main

import (
	"flag"
	"fmt"
	"io"
	"os"
)

var (
	input  = flag.String("i", "", "Input file")
	output = flag.String("o", "", "Output file")
)

func main() {
	flag.Parse()
	if *input == "" {
		fmt.Fprintf(os.Stderr, "-i is required\n")
		os.Exit(1)
	}
	if *output == "" {
		fmt.Fprintf(os.Stderr, "-o is required\n")
		os.Exit(1)
	}

	i, err := NewTarImage(*input)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error opening input file: %v\n", err)
		os.Exit(1)
	}

	o := Extract(i)
	defer o.Close()

	f, err := os.Create(*output)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error creating output file: %v\n", err)
		os.Exit(1)
	}
	defer f.Close()

	if _, err := io.Copy(f, o); err != nil {
		fmt.Fprintf(os.Stderr, "error copying output: %v\n", err)
		os.Exit(1)
	}
}
